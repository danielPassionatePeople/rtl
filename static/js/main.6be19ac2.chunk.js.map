{"version":3,"sources":["components/Loader/index.js","utils/internal/redux-utils.js","global/episodes/actions.js","global/episodes/constants.js","serviceWorker.js","router/routes.js","router/RouteWithSubRoutes.js","global/shows/constants.js","containers/App/index.js","global/shows/actions.js","global/shows/reducer.js","global/episodes/reducer.js","utils/api.js","services/shows.js","utils/internal/sagaHelpers.js","global/shows/sagas.js","services/episodes.js","global/episodes/sagas.js","sagas.js","store.js","global-styles.js","index.js","reducers.js","router/constants.js","router/history.js"],"names":["Wrap","styled","div","_templateObject","Spinner","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react_loader_spinner__WEBPACK_IMPORTED_MODULE_2___default","type","color","height","width","mapDispatchers","dispatchers","dispatch","Object","_Users_danielalarconamador_Projects_rtl_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","bindActionCreators","__webpack_require__","d","__webpack_exports__","loadEpisodes","loadEpisodesSuccess","_constants__WEBPACK_IMPORTED_MODULE_0__","id","LOAD_EPISODES","payload","episodes","LOAD_EPISODES_SUCCESS","LOAD_EPISODES_FAIL","Boolean","window","location","hostname","match","routeConfig","path","HOMEPAGE_ROUTE","name","exact","getModules","e","then","bind","concat","DETAILS_PAGE","Promise","all","EPISODE_PAGE","NOT_FOUND_ROUTE","getRoute","_ref","props","objectWithoutProperties","objectSpread","component","Loadable","loader","loading","Loader","delay","RouteWithSubRoutes","route","react_default","Route","render","assign","LOAD_SHOWS","LOAD_SHOWS_SUCCESS","LOAD_SHOWS_FAIL","SHOW_IDS_LIST","Wrapper","Logo","img","_templateObject2","loadShows","ids","compose","withRouter","connect","undefined","lifecycle","componentDidMount","this","children","react","src","onClick","browserHistory","push","Switch","React","Children","toArray","initialState","isLoading","data","showsReducer","state","arguments","length","action","shows","episodesReducer","get","resolve","reject","fetch","method","res","json","catch","error","console","log","fetchShow","forkAllSagas","sagas","regenerator_default","wrap","_context","prev","next","map","fork","stop","_marked","generateForkedCall","handleLoadShows","watchForLoadingShows","apiCall","_context2","mark","_callee","abrupt","sent","sagas_marked","forkedCalls","responses","_context3","call","join","apply","toConsumableArray","Array","isArray","put","_marked2","_context4","takeLatest","_marked3","fetchEpisodes","showId","handleFetchEpisodes","watchForFetchEpisodes","episodes_sagas_marked","sagas_marked2","rootSaga","showsSaga","episodesSaga","src_sagas_marked","sagaMiddleware","createSagaMiddleware","injectGlobal","global_styles_templateObject","store","history","middlewares","routerMiddleware","enhancers","applyMiddleware","composeEnhancers","createStore","asyncReducers","reducers","combineReducers","connectRouter","createReducer","runSaga","run","injectedReducers","injectedSagas","configureStore","routes","MOUNT_NODE","document","getElementById","ReactDOM","es","connected_react_router_lib","containers_App","i","router_RouteWithSubRoutes","key","navigator","serviceWorker","ready","registration","unregister","history__WEBPACK_IMPORTED_MODULE_0__","createBrowserHistory"],"mappings":"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","file":"static/js/main.6be19ac2.chunk.js","sourcesContent":["import React from 'react';\nimport Loader from 'react-loader-spinner';\nimport styled from 'styled-components';\n\nconst Spinner = () => (\n  <Wrap>\n    <Loader type=\"Bars\" color=\"white\" height=\"100\" width=\"100\" />\n  </Wrap>\n);\n\nconst Wrap = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default Spinner;\n","import { bindActionCreators } from 'redux';\n\nexport const mapDispatchers = (dispatchers) => (dispatch) => ({\n  ...bindActionCreators(dispatchers, dispatch),\n  dispatch,\n});\n","import { LOAD_EPISODES, LOAD_EPISODES_SUCCESS, LOAD_EPISODES_FAIL } from './constants';\n\nexport function loadEpisodes(id) {\n  return {\n    type: LOAD_EPISODES,\n    payload: {\n      id,\n    },\n  };\n}\n\nexport function loadEpisodesSuccess(episodes) {\n  return {\n    type: LOAD_EPISODES_SUCCESS,\n    payload: {\n      episodes,\n    },\n  };\n}\n\nexport function loadEpisodesFail() {\n  return {\n    type: LOAD_EPISODES_FAIL,\n  };\n}\n","export const LOAD_EPISODES = 'rtl/Episodes/LOAD_EPISODES';\nexport const LOAD_EPISODES_SUCCESS = 'rtl/Episodes/LOAD_EPISODES_SUCCESS';\nexport const LOAD_EPISODES_FAIL = 'rtl/Episodes/LOAD_EPISODES_FAIL';\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import Loadable from 'react-loadable';\nimport { HOMEPAGE_ROUTE, DETAILS_PAGE, EPISODE_PAGE, NOT_FOUND_ROUTE } from './constants';\nimport Loader from '../components/Loader';\n\nconst routeConfig = [\n  {\n    path: HOMEPAGE_ROUTE,\n    name: 'homePage',\n    exact: true,\n    getModules: () => import('../containers/HomePage'),\n  },\n  {\n    path: `${DETAILS_PAGE}/:id`,\n    name: 'detailsPage',\n    exact: true,\n    getModules: () => import('../containers/DetailsPage'),\n  },\n  {\n    path: `${DETAILS_PAGE}/:id${EPISODE_PAGE}/:episodeId`,\n    name: 'episodePage',\n    exact: true,\n    getModules: () => import('../containers/DetailsPage'),\n  },\n  {\n    name: 'notFoundPage',\n    path: NOT_FOUND_ROUTE,\n    getModules: () => import('../containers/NotFoundPage'),\n  },\n];\n\nconst getRoute = ({ path, name, getModules, ...props }) => ({\n  path,\n  name,\n  component: Loadable({\n    loader: getModules,\n    loading: Loader,\n    delay: 300,\n  }),\n  ...props,\n});\n\nexport default function createRoutes() {\n  return routeConfig.map((route) => getRoute(route));\n}\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\n// wrap <Route> and use this everywhere instead, then when\n// sub routes are added to any route it'll work\nconst RouteWithSubRoutes = (route) => (\n  <Route\n    path={route.path}\n    render={(props) => (\n      // pass the sub-routes down to keep nesting\n      <route.component {...props} {...route} />\n    )}\n  />\n);\n\nexport default RouteWithSubRoutes;\n","export const LOAD_SHOWS = 'rtl/Shows/LOAD_SHOWS';\nexport const LOAD_SHOWS_SUCCESS = 'rtl/Shows/LOAD_SHOWS_SUCCESS';\nexport const LOAD_SHOWS_FAIL = 'rtl/Shows/LOAD_SHOWS_FAIL';\n\nexport const SHOW_IDS_LIST = [\n  6771,\n  6,\n  25,\n  24,\n  7,\n  10,\n  123,\n  4534,\n  435,\n  1234,\n  54,\n  234,\n  5364,\n  345,\n  3,\n  12,\n  41,\n  243,\n  65,\n  5894,\n];\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { compose, lifecycle } from 'recompose';\nimport styled from 'styled-components';\nimport { mapDispatchers } from '../../utils/internal/redux-utils';\nimport { SHOW_IDS_LIST } from '../../global/shows/constants';\nimport { loadShows } from '../../global/shows/actions';\nimport { HOMEPAGE_ROUTE } from '../../router/constants';\nimport browserHistory from '../../router/history';\n\nconst App = ({ children }) => (\n  <Fragment>\n    <Logo\n      src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/RTL_logo.svg/105px-RTL_logo.svg.png\"\n      onClick={() => browserHistory.push(HOMEPAGE_ROUTE)}\n    />\n    <Wrapper>\n      <Switch>{React.Children.toArray(children)}</Switch>\n    </Wrapper>\n  </Fragment>\n);\n\nconst Wrapper = styled.div`\n  display: block;\n  width: 100%;\n  min-height: 100%;\n  margin: 0 auto;\n`;\n\nexport const Logo = styled.img`\n  cursor: pointer;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 40px;\n  padding: 10px 20px;\n  z-index: 100;\n`;\n\nApp.propTypes = {\n  children: PropTypes.node,\n};\n\nconst dispatchers = mapDispatchers({\n  loadShows,\n});\n\nexport default compose(\n  withRouter,\n  connect(\n    undefined,\n    dispatchers\n  ),\n  lifecycle({\n    componentDidMount() {\n      this.props.loadShows(SHOW_IDS_LIST);\n    },\n  })\n)(App);\n","import { LOAD_SHOWS, LOAD_SHOWS_SUCCESS, LOAD_SHOWS_FAIL } from './constants';\n\nexport function loadShows(ids) {\n  return {\n    type: LOAD_SHOWS,\n    payload: {\n      ids,\n    },\n  };\n}\n\nexport function loadShowsSuccess(shows) {\n  return {\n    type: LOAD_SHOWS_SUCCESS,\n    payload: {\n      shows,\n    },\n  };\n}\n\nexport function loadShowsFail() {\n  return {\n    type: LOAD_SHOWS_FAIL,\n  };\n}\n","import { LOAD_SHOWS, LOAD_SHOWS_SUCCESS, LOAD_SHOWS_FAIL } from './constants';\n\nexport const initialState = {\n  isLoading: false,\n  data: null,\n};\n\nexport default function showsReducer(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case LOAD_SHOWS:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case LOAD_SHOWS_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        data: payload.shows,\n      };\n    case LOAD_SHOWS_FAIL:\n      return {\n        ...state,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { LOAD_EPISODES, LOAD_EPISODES_SUCCESS, LOAD_EPISODES_FAIL } from './constants';\n\nexport const initialState = {\n  isLoading: false,\n  data: [],\n};\n\nexport default function episodesReducer(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case LOAD_EPISODES:\n      return {\n        ...state,\n        isLoading: true,\n        data: [],\n      };\n    case LOAD_EPISODES_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        data: payload.episodes,\n      };\n    case LOAD_EPISODES_FAIL:\n      return {\n        ...state,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n}\n","export const SERVER_DOMAIN = 'http://api.tvmaze.com';\n\n// HTTP GET Request - Returns Resolved or Rejected Promise\nexport const get = (path) =>\n  new Promise((resolve, reject) => {\n    fetch(path, {\n      method: 'get',\n    })\n      .then((res) => {\n        resolve(res.json());\n      })\n      .catch((error) => {\n        // eslint-disable-next-line\n        reject(console.log(error)); // not handling error in this assignment\n      });\n  });\n","import { get, SERVER_DOMAIN } from '../utils/api';\n\nexport const SHOWS_URL = `/shows`;\n\nexport const fetchShow = (id) => get(`${SERVER_DOMAIN}${SHOWS_URL}/${id}`);\n","import { all, fork } from 'redux-saga/effects';\n\nexport function* forkAllSagas(sagas) {\n  yield all(sagas.map(fork));\n}\n","import { call, takeLatest, put, fork, join } from 'redux-saga/effects';\nimport { LOAD_SHOWS } from './constants';\nimport { fetchShow } from '../../services/shows';\nimport { loadShowsSuccess } from './actions';\nimport { forkAllSagas } from '../../utils/internal/sagaHelpers';\n\nexport function* generateForkedCall(apiCall, ids) {\n  // eslint-disable-next-line func-names\n  return yield ids.map(function*(id) {\n    return yield fork(apiCall, id);\n  });\n}\n\nfunction* handleLoadShows({ payload }) {\n  const forkedCalls = yield call(generateForkedCall, fetchShow, payload.ids);\n  let responses = yield join(...forkedCalls);\n  responses = Array.isArray(responses) ? responses : [responses];\n  yield put(loadShowsSuccess(responses));\n}\n\nfunction* watchForLoadingShows() {\n  yield takeLatest(LOAD_SHOWS, handleLoadShows);\n}\n\nexport default forkAllSagas([watchForLoadingShows]);\n","import { get, SERVER_DOMAIN } from '../utils/api';\nimport { SHOWS_URL } from './shows';\n\nconst EPISODES_URL = `/episodes`;\n\nexport const fetchEpisodes = (showId) => get(`${SERVER_DOMAIN}${SHOWS_URL}/${showId}${EPISODES_URL}`);\n","import { call, takeLatest, put } from 'redux-saga/effects';\nimport { LOAD_EPISODES } from './constants';\nimport { loadEpisodesSuccess } from './actions';\nimport { forkAllSagas } from '../../utils/internal/sagaHelpers';\nimport { fetchEpisodes } from '../../services/episodes';\n\nfunction* handleFetchEpisodes({ payload }) {\n  const episodes = yield call(fetchEpisodes, payload.id);\n  yield put(loadEpisodesSuccess(episodes));\n}\n\nfunction* watchForFetchEpisodes() {\n  yield takeLatest(LOAD_EPISODES, handleFetchEpisodes);\n}\n\nexport default forkAllSagas([watchForFetchEpisodes]);\n","import { all } from 'redux-saga/effects';\nimport showsSaga from './global/shows/sagas';\nimport episodesSaga from './global/episodes/sagas';\n\n// Insert new async saga here\nfunction* rootSaga() {\n  yield all([showsSaga, episodesSaga]);\n}\n\nexport default rootSaga;\n","/**\n * Create the store with dynamic reducers\n */\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { routerMiddleware } from 'connected-react-router';\nimport createReducer from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(initialState = {}, history) {\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable no-underscore-dangle, indent */\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' && typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ maxAge: 150 })\n      : compose;\n  /* eslint-enable */\n\n  const store = createStore(createReducer(), initialState, composeEnhancers(...enhancers));\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n  // Async sagas\n  store.runSaga(rootSaga);\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n","import { injectGlobal } from 'styled-components';\n\n/* eslint no-unused-expressions: 0 */\ninjectGlobal`\n  html {\n    height: 100%;\n  }\n  body {\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    margin:  0px auto;\n    padding: 0px;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  #root {\n    height: 100%;\n  }\n\n  body {\n    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    color: #F3F3F3;\n    background-color: #28313b;\n  }\n\n  body.fontLoaded {\n    font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  }\n  \n  #app {\n    min-height: 100%;\n    min-width: 100%;\n    width: 100%;\n    display: flex;\n  }\n\n  p,\n  label {\n    line-height: 1.5em;\n  }\n\n\n`;\n","import 'babel-polyfill';\n// Import all the third party stuff\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport * as serviceWorker from './serviceWorker';\n\nimport history from './router/history';\n\nimport createRoutes from './router/routes';\nimport RouteWithSubRoutes from './router/RouteWithSubRoutes';\n\n// Import root app\nimport App from './containers/App';\n\nimport configureStore from './store';\n\n// Import CSS reset and Global Styles\nimport './global-styles';\n\n// Create redux store with history\nconst initialState = {};\nconst store = configureStore(initialState, history);\nconst routes = createRoutes();\nconst MOUNT_NODE = document.getElementById('root');\n\nconst AppProvider = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App>\n        {routes.map((route, i) => (\n          // eslint-disable-next-line\n          <RouteWithSubRoutes key={i} {...route} routes={routes} />\n        ))}\n      </App>\n    </ConnectedRouter>\n  </Provider>\n);\n\nReactDOM.render(<AppProvider />, MOUNT_NODE);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Combine all reducers in this file and export the combined reducers.\n * If we were to do this in configureStore.js, reducers wouldn't be hot reloadable.\n */\n\nimport { connectRouter } from 'connected-react-router';\nimport { combineReducers } from 'redux';\nimport history from './router/history';\nimport showsReducer from './global/shows/reducer';\nimport episodesReducer from './global/episodes/reducer';\n\n/**\n * Creates the main reducer with the asynchronously loaded ones\n */\nexport default function createReducer(asyncReducers) {\n  const reducers = combineReducers({\n    shows: showsReducer,\n    episodes: episodesReducer,\n    ...asyncReducers,\n  });\n  // TODO possible improvement, move it as a 'withReducer' in the App container\n  return connectRouter(history)(reducers);\n}\n","export const HOMEPAGE_ROUTE = 'rtl/';\nexport const DETAILS_PAGE = 'rtl/details';\nexport const EPISODE_PAGE = 'rtl/episode';\nexport const NOT_FOUND_ROUTE = '*';\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n"],"sourceRoot":""}